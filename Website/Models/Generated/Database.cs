



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `SuomenkieliDB`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=HIPPELI;Initial Catalog=SuomenkieliDB;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Suomenkieli
{

	public partial class SuomenkieliDB : Database
	{
		public SuomenkieliDB() 
			: base("SuomenkieliDB")
		{
			CommonConstruct();
		}

		public SuomenkieliDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			SuomenkieliDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
		public static SuomenkieliDB GetInstance()
		{
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new SuomenkieliDB();
		}

		[ThreadStatic] static SuomenkieliDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
		

		public class Record<T> where T:new()
		{
			public static SuomenkieliDB repo { get { return SuomenkieliDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



	

	[TableName("dbo.Relationships")]



	[PrimaryKey("ID")]



	[ExplicitColumns]
	public partial class Relationship : SuomenkieliDB.Record<Relationship>  
	{



		[Column] public int ID { get; set; }





		[Column("Relationship")] public string _Relationship { get; set; }



	}

	

	[TableName("dbo.Concepts")]



	[PrimaryKey("ID")]



	[ExplicitColumns]
	public partial class Concept : SuomenkieliDB.Record<Concept>  
	{



		[Column] public int ID { get; set; }





		[Column("Concept")] public string _Concept { get; set; }



	}

	

	[TableName("dbo.Languages")]



	[PrimaryKey("ID")]



	[ExplicitColumns]
	public partial class Language : SuomenkieliDB.Record<Language>  
	{



		[Column] public int ID { get; set; }





		[Column] public string Code { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string Localization { get; set; }



	}

	

	[TableName("dbo.Sentence_Concept")]



	[ExplicitColumns]
	public partial class Sentence_Concept : SuomenkieliDB.Record<Sentence_Concept>  
	{



		[Column] public int SentenceID { get; set; }





		[Column] public int ConceptID { get; set; }



	}

	

	[TableName("dbo.Sentences")]



	[PrimaryKey("ID")]



	[ExplicitColumns]
	public partial class Sentence : SuomenkieliDB.Record<Sentence>  
	{



		[Column] public int ID { get; set; }





		[Column] public int LanguageID { get; set; }





		[Column("Sentence")] public string _Sentence { get; set; }





		[Column] public int Source { get; set; }



	}

	

	[TableName("dbo.SentenceTranslations")]



	[ExplicitColumns]
	public partial class SentenceTranslation : SuomenkieliDB.Record<SentenceTranslation>  
	{



		[Column] public int SentenceA { get; set; }





		[Column] public int SentenceB { get; set; }



	}

	

	[TableName("dbo.Sentence_Word")]



	[ExplicitColumns]
	public partial class Sentence_Word : SuomenkieliDB.Record<Sentence_Word>  
	{



		[Column] public int SentenceID { get; set; }





		[Column] public int WordID { get; set; }



	}

	

	[TableName("dbo.Sources")]



	[PrimaryKey("ID")]



	[ExplicitColumns]
	public partial class Source : SuomenkieliDB.Record<Source>  
	{



		[Column] public int ID { get; set; }





		[Column("Source")] public string _Source { get; set; }





		[Column] public string Info { get; set; }



	}

	

	[TableName("dbo.Word_Concept")]



	[ExplicitColumns]
	public partial class Word_Concept : SuomenkieliDB.Record<Word_Concept>  
	{



		[Column] public int WordID { get; set; }





		[Column] public int ConceptID { get; set; }



	}

	

	[TableName("dbo.Word_Definition")]



	[PrimaryKey("ID")]



	[ExplicitColumns]
	public partial class Word_Definition : SuomenkieliDB.Record<Word_Definition>  
	{



		[Column] public int ID { get; set; }





		[Column] public int DefinitionID { get; set; }





		[Column] public int WordID { get; set; }





		[Column] public int? Rank { get; set; }



	}

	

	[TableName("dbo.WordRelationships")]



	[ExplicitColumns]
	public partial class WordRelationship : SuomenkieliDB.Record<WordRelationship>  
	{



		[Column] public int WordA { get; set; }





		[Column] public int WordB { get; set; }





		[Column] public int RelationshipID { get; set; }



	}

	

	[TableName("dbo.sysdiagrams")]



	[PrimaryKey("diagram_id")]



	[ExplicitColumns]
	public partial class sysdiagram : SuomenkieliDB.Record<sysdiagram>  
	{



		[Column] public string name { get; set; }





		[Column] public int principal_id { get; set; }





		[Column] public int diagram_id { get; set; }





		[Column] public int? version { get; set; }





		[Column] public byte[] definition { get; set; }



	}

	

	[TableName("dbo.Definition_Concept")]



	[ExplicitColumns]
	public partial class Definition_Concept : SuomenkieliDB.Record<Definition_Concept>  
	{



		[Column] public int DefinitionID { get; set; }





		[Column] public int ConceptID { get; set; }



	}

	

	[TableName("dbo.Words")]



	[PrimaryKey("ID")]



	[ExplicitColumns]
	public partial class Word : SuomenkieliDB.Record<Word>  
	{



		[Column] public int ID { get; set; }





		[Column("Word")] public string _Word { get; set; }





		[Column] public int? BaseWordID { get; set; }





		[Column] public int LanguageID { get; set; }



	}

	

	[TableName("dbo.Definitions")]



	[PrimaryKey("ID")]



	[ExplicitColumns]
	public partial class Definition : SuomenkieliDB.Record<Definition>  
	{



		[Column] public int ID { get; set; }





		[Column] public int LanguageID { get; set; }





		[Column("Definition")] public string _Definition { get; set; }





		[Column] public int SourceID { get; set; }



	}


}




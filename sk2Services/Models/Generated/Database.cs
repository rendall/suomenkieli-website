
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `SK2`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=DESKTOP-A394FCE;Initial Catalog=sk_db;Integrated Security=False;User ID=sa;password=**zapped**;MultiSubnetFailover=False`
//     Schema:                 ``
//     Include Views:          `False`
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;
namespace Sk2Services
{
    public partial class SK2 : Database
    {
        public SK2()
            : base("SK2")
        {
            CommonConstruct();
        }
        public SK2(string connectionStringName)
            : base(connectionStringName)
        {
            CommonConstruct();
        }

        partial void CommonConstruct();

        public interface IFactory
        {
            SK2 GetInstance();
        }

        public static IFactory Factory { get; set; }
        public static SK2 GetInstance()
        {
            if (_instance != null)
                return _instance;

            if (Factory != null)
                return Factory.GetInstance();
            else
                return new SK2();
        }
        [ThreadStatic] static SK2 _instance;

        public override void OnBeginTransaction()
        {
            if (_instance == null)
                _instance = this;
        }

        public override void OnEndTransaction()
        {
            if (_instance == this)
                _instance = null;
        }

        public class Record<T> where T : new()
        {
            public static SK2 repo { get { return SK2.GetInstance(); } }
            public bool IsNew() { return repo.IsNew(this); }
            public object Insert() { return repo.Insert(this); }
            public void Save() { repo.Save(this); }
            public int Update() { return repo.Update(this); }
            public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
            public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
            public static int Update(Sql sql) { return repo.Update<T>(sql); }
            public int Delete() { return repo.Delete(this); }
            public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
            public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
            public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
            public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
            public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
            public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
            public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
            public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
            public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
            public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
            public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
            public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
            public static T Single(Sql sql) { return repo.Single<T>(sql); }
            public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
            public static T First(Sql sql) { return repo.First<T>(sql); }
            public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
            public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
            public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
            public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
            public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
            public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
            public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
            public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
            public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
            public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
        }
    }


    [TableName("sk.definitions")]
    [PrimaryKey("id")]
    [ExplicitColumns]
    public partial class Definition : SK2.Record<Definition>
    {
        [Column] public int id { get; set; }
        [Column] public string text { get; set; }
        [Column] public int termId { get; set; }
        [Column] public string language { get; set; }
        [Column] public byte rank { get; set; }
    }

    [TableName("sk.examples")]
    [PrimaryKey("id")]
    [ExplicitColumns]
    public partial class Example : SK2.Record<Example>
    {
        [Column] public int id { get; set; }
        [Column] public string text { get; set; }
        [Column] public string language { get; set; }
    }

    [TableName("sk.links")]
    [PrimaryKey("id")]
    [ExplicitColumns]
    public partial class Link : SK2.Record<Link>
    {
        [Column] public int id { get; set; }
        [Column] public string title { get; set; }
        [Column] public string href { get; set; }
        [Column] public string text { get; set; }
        [Column] public int? termId { get; set; }
    }

    [TableName("sk.terms")]
    [PrimaryKey("id")]
    [ExplicitColumns]
    public partial class Term : SK2.Record<Term>
    {
        [Column] public int id { get; set; }
        [Column] public string text { get; set; }
        [Column] public int frequency { get; set; }
    }
}
